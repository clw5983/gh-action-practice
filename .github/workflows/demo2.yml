name: Deploy Website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.something }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename # such that other jobs can use
        # id of that step for referencing the output above
        id: publish
        # something is the name of this step's ouptut
        # on the RHS of the '=' sign, you have the value that should be accessible under that output name
        # it is the {} placeholder here (but it can be anything like some text)
        # >> targets a special file created by GitHub in the environment 
        # in which your job runs where the output key-value pair is written to
        run: find dist/assets/*.js -type f -execdir echo 'something={}' >> $GITHUB_OUTPUT ';'
        # alternative syntax (instead of setting the output as a key-value pair)
        # may not be supported in the future anymore:
        # run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' ';'
      # these file produced and uploaded in this job
      # will not automatically exist in the deploy job
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: |
            dist
            package.json
  deploy:
    # the "needs" definition is needed to ensure that the deploy job will run after the build job
    # otherwise, we won't be able to download the artifacts because they wouldn't have been uploaded yet
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          # there may be multiple artifacts in one and the same job / in different jobs
          # it is necessary for the workflow to know which artifacts to download
          # here, the zip file produced by upload-artifact will be downloaded and unzipped
          name: dist-files
      - name: Output contents
        run: ls # we can see the contents of the dist folder available in that folder in which the deploy job runs
      - name: Deploy
        run: echo "Deploying..."
